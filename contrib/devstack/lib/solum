# lib/solum

# Dependencies:
# ``functions`` file
# ``DEST``, ``DATA_DIR``, ``STACK_USER`` must be defined
# ``ADMIN_{TENANT_NAME|PASSWORD}`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# install_solum
# install_solumclient
# configure_solum
# start_solum
# stop_solum

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Defaults
# --------

# Set up default repos
SOLUM_REPO=${SOLUM_REPO:-${GIT_BASE}/stackforge/solum.git}
SOLUM_BRANCH=${SOLUM_BRANCH:-master}
SOLUMCLIENT_REPO=${SOLUMCLIENT_REPO:-${GIT_BASE}/stackforge/python-solumclient.git}
SOLUMCLIENT_BRANCH=${SOLUMCLIENT_BRANCH:-master}

# Set up default directories
SOLUM_DIR=$DEST/solum
SOLUMCLIENT_DIR=$DEST/python-solumclient
SOLUM_CONF_DIR=${SOLUM_CONF_DIR:-/etc/solum}
SOLUM_CONF_FILE=solum.conf
ADMIN_TENANT_NAME=${ADMIN_TENANT_NAME:-admin}
ADMIN_NAME=${ADMIN_NAME:-admin}
ADMIN_PASSWORD=${ADMIN_PASSWORD:-nova}
SOLUM_DEBUG=${SOLUM_DEBUG:-True}
SOLUM_USER=solum
SOLUM_AUTH_CACHE_DIR=${SOLUM_AUTH_CACHE_DIR:-/var/cache/solum}

SOLUM_SERVICE_HOST=${SOLUM_SERVICE_HOST:-$SERVICE_HOST}
SOLUM_SERVICE_PORT=${SOLUM_SERVICE_PORT:-9777}
SOLUM_BUILDER_SERVICE_PORT=${SOLUM_BUILDER_SERVICE_PORT:-9778}
SOLUM_SERVICE_PROTOCOL=${SOLUM_SERVICE_PROTOCOL:-$SERVICE_PROTOCOL}

# Support entry points installation of console scripts
if [[ -d $SOLUM_DIR/bin ]]; then
    SOLUM_BIN_DIR=$SOLUM_DIR/bin
else
    SOLUM_BIN_DIR=$(get_python_exec_prefix)
fi

# Functions
# ---------

# create_solum_service_and_endpoint() - Set up required solum service and endpoint
function create_solum_service_and_endpoint() {

    if [[ "$KEYSTONE_CATALOG_BACKEND" = 'sql' ]]; then
        SOLUM_SERVICE=$(keystone service-create \
            --name=solum \
            --type=application_deployment \
            --description="Solum" \
            | grep " id " | get_field 2)
        keystone endpoint-create \
            --region RegionOne \
            --service_id $SOLUM_SERVICE \
            --publicurl "$SOLUM_SERVICE_PROTOCOL://$SOLUM_SERVICE_HOST:$SOLUM_SERVICE_PORT" \
            --adminurl "$SOLUM_SERVICE_PROTOCOL://$SOLUM_SERVICE_HOST:$SOLUM_SERVICE_PORT" \
            --internalurl "$SOLUM_SERVICE_PROTOCOL://$SOLUM_SERVICE_HOST:$SOLUM_SERVICE_PORT"

        SOLUM_BUILDER_SERVICE=$(keystone service-create \
            --name=solum \
            --type=image_builder \
            --description="Solum Image Builder" \
            | grep " id " | get_field 2)
        keystone endpoint-create \
            --region RegionOne \
            --service_id $SOLUM_BUILDER_SERVICE \
            --publicurl "$SOLUM_SERVICE_PROTOCOL://$SOLUM_SERVICE_HOST:$SOLUM_BUILDER_SERVICE_PORT" \
            --adminurl "$SOLUM_SERVICE_PROTOCOL://$SOLUM_SERVICE_HOST:$SOLUM_BUILDER_SERVICE_PORT" \
            --internalurl "$SOLUM_SERVICE_PROTOCOL://$SOLUM_SERVICE_HOST:$SOLUM_BUILDER_SERVICE_PORT"
    fi
}

# configure_solum() - Set config files, create data dirs, etc
function configure_solum() {

    if [[ ! -d $SOLUM_CONF_DIR ]]; then
        sudo mkdir -p $SOLUM_CONF_DIR
    fi
    sudo chown $STACK_USER $SOLUM_CONF_DIR

    # Copy over solum configuration file and configure common parameters.
    cp $SOLUM_DIR/etc/solum/solum.conf.sample $SOLUM_CONF_DIR/$SOLUM_CONF_FILE

    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE DEFAULT debug $SOLUM_DEBUG

    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE DEFAULT use_syslog $SYSLOG

    # make trace visible
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE DEFAULT logging_context_format_string "%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s] s%(message)s %(support_trace)s"

    # Setup keystone_authtoken section
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken auth_host $KEYSTONE_AUTH_HOST
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken auth_port $KEYSTONE_AUTH_PORT
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken cafile $KEYSTONE_SSL_CA
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$KEYSTONE_SERVICE_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken admin_tenant_name service
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken admin_user $SOLUM_USER
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken admin_password $ADMIN_PASSWORD
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE keystone_authtoken signing_dir $SOLUM_AUTH_CACHE_DIR

    # configure the database.
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE database connection `database_connection_url solum`

    # configure the api servers to listen on 0.0.0.0
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE api host 0.0.0.0
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE builder host 0.0.0.0

    # common rpc settings
    iniset_rpc_backend solum $SOLUM_CONF_DIR/$SOLUM_CONF_FILE DEFAULT

    # service rpc settings
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE conductor topic solum-conductor
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE deployer topic solum-deployer
    iniset $SOLUM_CONF_DIR/$SOLUM_CONF_FILE worker topic solum-worker
}

#register solum user in Keystone
function add_solum_user() {
    # Register new service user as other services do
    SOLUM_USER_ID=$(keystone user-create --name=$SOLUM_USER \
       --pass=$ADMIN_PASSWORD \
       --tenant_id $SERVICE_TENANT \
       --email=$SOLUM_USER@example.com \
       | grep " id " | get_field 2)

     keystone user-role-add \
       --user-id $SOLUM_USER_ID \
       --role-id $ADMIN_ROLE \
       --tenant-id $SERVICE_TENANT
}

#create_solum_cache_dir() - Setup keystone signing folder
function create_solum_cache_dir() {
    sudo mkdir -p $SOLUM_AUTH_CACHE_DIR
    sudo chown $STACK_USER $SOLUM_AUTH_CACHE_DIR
    sudo chmod 700 $SOLUM_AUTH_CACHE_DIR
    rm -f $SOLUM_AUTH_CACHE_DIR/*
}

# init_solum() - Initialize databases, etc.
function init_solum() {
    recreate_database solum utf8
    # Run Solum db migrations
    solum-db-manage --config-file $SOLUM_CONF_DIR/$SOLUM_CONF_FILE upgrade head
    create_solum_cache_dir
}

# install_solumclient() - Collect source and prepare
function install_solumclient {
    ERROR_ON_CLONE=False
    git_clone $SOLUMCLIENT_REPO $SOLUMCLIENT_DIR $SOLUMCLIENT_BRANCH
    cd $SOLUMCLIENT_DIR
    setup_develop $SOLUMCLIENT_DIR
}

# install_solum() - Collect source and prepare
function install_solum() {
    git_clone $SOLUM_REPO $SOLUM_DIR $SOLUM_BRANCH
    setup_develop $SOLUM_DIR
}

# start_solum() - Start running processes, including screen
function start_solum() {
    screen_it solum-api "cd $SOLUM_DIR && $SOLUM_BIN_DIR/solum-api --config-file $SOLUM_CONF_DIR/$SOLUM_CONF_FILE"
    screen_it solum-build-api "cd $SOLUM_DIR && $SOLUM_BIN_DIR/solum-builder-api --config-file $SOLUM_CONF_DIR/$SOLUM_CONF_FILE"
    screen_it solum-conductor "cd $SOLUM_DIR && $SOLUM_BIN_DIR/solum-conductor --config-file $SOLUM_CONF_DIR/$SOLUM_CONF_FILE"
    screen_it solum-deployer "cd $SOLUM_DIR && $SOLUM_BIN_DIR/solum-deployer --config-file $SOLUM_CONF_DIR/$SOLUM_CONF_FILE"
    screen_it solum-worker "cd $SOLUM_DIR && $SOLUM_BIN_DIR/solum-worker --config-file $SOLUM_CONF_DIR/$SOLUM_CONF_FILE"
}

# stop_solum() - Stop running processes
function stop_solum() {
    # Kill the solum screen windows
    screen -S $SCREEN_NAME -p solum-api -X kill
    screen -S $SCREEN_NAME -p solum-build-api -X kill
    screen -S $SCREEN_NAME -p solum-conductor -X kill
    screen -S $SCREEN_NAME -p solum-deployer -X kill
    screen -S $SCREEN_NAME -p solum-worker -X kill
}

# Restore xtrace
$XTRACE

# Local variables:
# mode: shell-script
# End:
